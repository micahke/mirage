// Code generated by MockGen. DO NOT EDIT.
// Source: flow/flow.go
//
// Generated by this command:
//
//	mockgen -source=flow/flow.go -destination=mocks/flow/mock_flow.go -package=mock_flow
//

// Package mock_flow is a generated GoMock package.
package mock_flow

import (
	context "context"
	reflect "reflect"

	flow "github.com/micahke/mirage/flow"
	gomock "go.uber.org/mock/gomock"
)

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
	isgomock struct{}
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// getNext mocks base method.
func (m *MockNode) getNext() flow.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getNext")
	ret0, _ := ret[0].(flow.Node)
	return ret0
}

// getNext indicates an expected call of getNext.
func (mr *MockNodeMockRecorder) getNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getNext", reflect.TypeOf((*MockNode)(nil).getNext))
}

// run mocks base method.
func (m *MockNode) run(arg0 context.Context, arg1 []flow.Interceptor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "run", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// run indicates an expected call of run.
func (mr *MockNodeMockRecorder) run(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "run", reflect.TypeOf((*MockNode)(nil).run), arg0, arg1)
}

// setNext mocks base method.
func (m *MockNode) setNext(arg0 flow.Node) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setNext", arg0)
}

// setNext indicates an expected call of setNext.
func (mr *MockNodeMockRecorder) setNext(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setNext", reflect.TypeOf((*MockNode)(nil).setNext), arg0)
}
