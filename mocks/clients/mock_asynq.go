// Code generated by MockGen. DO NOT EDIT.
// Source: clients/asynq.go
//
// Generated by this command:
//
//	mockgen -source=clients/asynq.go -destination=mocks/clients/mock_asynq.go -package=mock_clients
//

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	context "context"
	reflect "reflect"
	time "time"

	asynq "github.com/hibiken/asynq"
	clients "github.com/micahke/mirage/clients"
	gomock "go.uber.org/mock/gomock"
)

// MockAsynqTask is a mock of AsynqTask interface.
type MockAsynqTask struct {
	ctrl     *gomock.Controller
	recorder *MockAsynqTaskMockRecorder
	isgomock struct{}
}

// MockAsynqTaskMockRecorder is the mock recorder for MockAsynqTask.
type MockAsynqTaskMockRecorder struct {
	mock *MockAsynqTask
}

// NewMockAsynqTask creates a new mock instance.
func NewMockAsynqTask(ctrl *gomock.Controller) *MockAsynqTask {
	mock := &MockAsynqTask{ctrl: ctrl}
	mock.recorder = &MockAsynqTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsynqTask) EXPECT() *MockAsynqTaskMockRecorder {
	return m.recorder
}

// Handler mocks base method.
func (m *MockAsynqTask) Handler(ctx context.Context, task *asynq.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockAsynqTaskMockRecorder) Handler(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockAsynqTask)(nil).Handler), ctx, task)
}

// Name mocks base method.
func (m *MockAsynqTask) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockAsynqTaskMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAsynqTask)(nil).Name))
}

// MockSchedulerClient is a mock of SchedulerClient interface.
type MockSchedulerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerClientMockRecorder
	isgomock struct{}
}

// MockSchedulerClientMockRecorder is the mock recorder for MockSchedulerClient.
type MockSchedulerClientMockRecorder struct {
	mock *MockSchedulerClient
}

// NewMockSchedulerClient creates a new mock instance.
func NewMockSchedulerClient(ctrl *gomock.Controller) *MockSchedulerClient {
	mock := &MockSchedulerClient{ctrl: ctrl}
	mock.recorder = &MockSchedulerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerClient) EXPECT() *MockSchedulerClientMockRecorder {
	return m.recorder
}

// Enqueue mocks base method.
func (m *MockSchedulerClient) Enqueue(task *asynq.Task, at time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", task, at)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockSchedulerClientMockRecorder) Enqueue(task, at any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockSchedulerClient)(nil).Enqueue), task, at)
}

// RegisterTask mocks base method.
func (m *MockSchedulerClient) RegisterTask(name string, task clients.AsynqTask) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterTask", name, task)
}

// RegisterTask indicates an expected call of RegisterTask.
func (mr *MockSchedulerClientMockRecorder) RegisterTask(name, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTask", reflect.TypeOf((*MockSchedulerClient)(nil).RegisterTask), name, task)
}

// Start mocks base method.
func (m *MockSchedulerClient) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockSchedulerClientMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSchedulerClient)(nil).Start))
}
