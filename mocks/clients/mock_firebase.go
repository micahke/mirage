// Code generated by MockGen. DO NOT EDIT.
// Source: clients/firebase.go
//
// Generated by this command:
//
//	mockgen -source=clients/firebase.go -destination=mocks/clients/mock_firebase.go -package=mock_clients
//

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	context "context"
	reflect "reflect"

	auth "firebase.google.com/go/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockFirebaseClient is a mock of FirebaseClient interface.
type MockFirebaseClient struct {
	ctrl     *gomock.Controller
	recorder *MockFirebaseClientMockRecorder
	isgomock struct{}
}

// MockFirebaseClientMockRecorder is the mock recorder for MockFirebaseClient.
type MockFirebaseClientMockRecorder struct {
	mock *MockFirebaseClient
}

// NewMockFirebaseClient creates a new mock instance.
func NewMockFirebaseClient(ctrl *gomock.Controller) *MockFirebaseClient {
	mock := &MockFirebaseClient{ctrl: ctrl}
	mock.recorder = &MockFirebaseClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirebaseClient) EXPECT() *MockFirebaseClientMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockFirebaseClient) CreateUser(ctx context.Context, email, password string) (*auth.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, email, password)
	ret0, _ := ret[0].(*auth.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockFirebaseClientMockRecorder) CreateUser(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockFirebaseClient)(nil).CreateUser), ctx, email, password)
}

// DeleteUser mocks base method.
func (m *MockFirebaseClient) DeleteUser(ctx context.Context, uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockFirebaseClientMockRecorder) DeleteUser(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockFirebaseClient)(nil).DeleteUser), ctx, uid)
}

// GetEmailVerificationLink mocks base method.
func (m *MockFirebaseClient) GetEmailVerificationLink(ctx context.Context, email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailVerificationLink", ctx, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailVerificationLink indicates an expected call of GetEmailVerificationLink.
func (mr *MockFirebaseClientMockRecorder) GetEmailVerificationLink(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailVerificationLink", reflect.TypeOf((*MockFirebaseClient)(nil).GetEmailVerificationLink), ctx, email)
}

// GetPasswordResetLink mocks base method.
func (m *MockFirebaseClient) GetPasswordResetLink(ctx context.Context, email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordResetLink", ctx, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordResetLink indicates an expected call of GetPasswordResetLink.
func (mr *MockFirebaseClientMockRecorder) GetPasswordResetLink(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordResetLink", reflect.TypeOf((*MockFirebaseClient)(nil).GetPasswordResetLink), ctx, email)
}

// GetUser mocks base method.
func (m *MockFirebaseClient) GetUser(ctx context.Context, uid string) (*auth.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, uid)
	ret0, _ := ret[0].(*auth.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockFirebaseClientMockRecorder) GetUser(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockFirebaseClient)(nil).GetUser), ctx, uid)
}

// GetUserByEmail mocks base method.
func (m *MockFirebaseClient) GetUserByEmail(ctx context.Context, email string) (*auth.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*auth.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockFirebaseClientMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockFirebaseClient)(nil).GetUserByEmail), ctx, email)
}

// SetDisplayName mocks base method.
func (m *MockFirebaseClient) SetDisplayName(ctx context.Context, uid, displayName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDisplayName", ctx, uid, displayName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDisplayName indicates an expected call of SetDisplayName.
func (mr *MockFirebaseClientMockRecorder) SetDisplayName(ctx, uid, displayName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDisplayName", reflect.TypeOf((*MockFirebaseClient)(nil).SetDisplayName), ctx, uid, displayName)
}

// UpdateUser mocks base method.
func (m *MockFirebaseClient) UpdateUser(ctx context.Context, uid string, user *auth.UserToUpdate) (*auth.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, uid, user)
	ret0, _ := ret[0].(*auth.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockFirebaseClientMockRecorder) UpdateUser(ctx, uid, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockFirebaseClient)(nil).UpdateUser), ctx, uid, user)
}

// VerifyIdToken mocks base method.
func (m *MockFirebaseClient) VerifyIdToken(ctx context.Context, idToken string) (*auth.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyIdToken", ctx, idToken)
	ret0, _ := ret[0].(*auth.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyIdToken indicates an expected call of VerifyIdToken.
func (mr *MockFirebaseClientMockRecorder) VerifyIdToken(ctx, idToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyIdToken", reflect.TypeOf((*MockFirebaseClient)(nil).VerifyIdToken), ctx, idToken)
}
