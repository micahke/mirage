// Code generated by MockGen. DO NOT EDIT.
// Source: clients/mongo.go
//
// Generated by this command:
//
//	mockgen -source=clients/mongo.go -destination=mocks/clients/mock_mongo.go -package=mock_clients
//

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	context "context"
	reflect "reflect"

	clients "github.com/micahke/mirage/clients"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
	gomock "go.uber.org/mock/gomock"
)

// MockMongoIndexView is a mock of MongoIndexView interface.
type MockMongoIndexView struct {
	ctrl     *gomock.Controller
	recorder *MockMongoIndexViewMockRecorder
	isgomock struct{}
}

// MockMongoIndexViewMockRecorder is the mock recorder for MockMongoIndexView.
type MockMongoIndexViewMockRecorder struct {
	mock *MockMongoIndexView
}

// NewMockMongoIndexView creates a new mock instance.
func NewMockMongoIndexView(ctrl *gomock.Controller) *MockMongoIndexView {
	mock := &MockMongoIndexView{ctrl: ctrl}
	mock.recorder = &MockMongoIndexViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoIndexView) EXPECT() *MockMongoIndexViewMockRecorder {
	return m.recorder
}

// CreateOne mocks base method.
func (m *MockMongoIndexView) CreateOne(ctx context.Context, model mongo.IndexModel) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOne", ctx, model)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOne indicates an expected call of CreateOne.
func (mr *MockMongoIndexViewMockRecorder) CreateOne(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOne", reflect.TypeOf((*MockMongoIndexView)(nil).CreateOne), ctx, model)
}

// MockMongoCollection is a mock of MongoCollection interface.
type MockMongoCollection struct {
	ctrl     *gomock.Controller
	recorder *MockMongoCollectionMockRecorder
	isgomock struct{}
}

// MockMongoCollectionMockRecorder is the mock recorder for MockMongoCollection.
type MockMongoCollectionMockRecorder struct {
	mock *MockMongoCollection
}

// NewMockMongoCollection creates a new mock instance.
func NewMockMongoCollection(ctrl *gomock.Controller) *MockMongoCollection {
	mock := &MockMongoCollection{ctrl: ctrl}
	mock.recorder = &MockMongoCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoCollection) EXPECT() *MockMongoCollectionMockRecorder {
	return m.recorder
}

// Aggregate mocks base method.
func (m *MockMongoCollection) Aggregate(ctx context.Context, pipeline, results any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", ctx, pipeline, results)
	ret0, _ := ret[0].(error)
	return ret0
}

// Aggregate indicates an expected call of Aggregate.
func (mr *MockMongoCollectionMockRecorder) Aggregate(ctx, pipeline, results any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockMongoCollection)(nil).Aggregate), ctx, pipeline, results)
}

// DeleteMany mocks base method.
func (m *MockMongoCollection) DeleteMany(ctx context.Context, filter any) (*mongo.DeleteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMany", ctx, filter)
	ret0, _ := ret[0].(*mongo.DeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockMongoCollectionMockRecorder) DeleteMany(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockMongoCollection)(nil).DeleteMany), ctx, filter)
}

// DeleteOne mocks base method.
func (m *MockMongoCollection) DeleteOne(ctx context.Context, filter any) (*mongo.DeleteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", ctx, filter)
	ret0, _ := ret[0].(*mongo.DeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockMongoCollectionMockRecorder) DeleteOne(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockMongoCollection)(nil).DeleteOne), ctx, filter)
}

// Exists mocks base method.
func (m *MockMongoCollection) Exists(ctx context.Context, filter any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, filter)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockMongoCollectionMockRecorder) Exists(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockMongoCollection)(nil).Exists), ctx, filter)
}

// Find mocks base method.
func (m *MockMongoCollection) Find(ctx context.Context, filter, results any, arg3 ...*options.FindOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter, results}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockMongoCollectionMockRecorder) Find(ctx, filter, results any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter, results}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMongoCollection)(nil).Find), varargs...)
}

// FindOne mocks base method.
func (m *MockMongoCollection) FindOne(ctx context.Context, filter, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, filter, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOne indicates an expected call of FindOne.
func (mr *MockMongoCollectionMockRecorder) FindOne(ctx, filter, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockMongoCollection)(nil).FindOne), ctx, filter, result)
}

// FindOneAndUpdate mocks base method.
func (m *MockMongoCollection) FindOneAndUpdate(ctx context.Context, filter, update any, opts ...*options.FindOneAndUpdateOptions) *mongo.SingleResult {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter, update}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOneAndUpdate", varargs...)
	ret0, _ := ret[0].(*mongo.SingleResult)
	return ret0
}

// FindOneAndUpdate indicates an expected call of FindOneAndUpdate.
func (mr *MockMongoCollectionMockRecorder) FindOneAndUpdate(ctx, filter, update any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter, update}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneAndUpdate", reflect.TypeOf((*MockMongoCollection)(nil).FindOneAndUpdate), varargs...)
}

// Indexes mocks base method.
func (m *MockMongoCollection) Indexes() clients.MongoIndexView {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Indexes")
	ret0, _ := ret[0].(clients.MongoIndexView)
	return ret0
}

// Indexes indicates an expected call of Indexes.
func (mr *MockMongoCollectionMockRecorder) Indexes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Indexes", reflect.TypeOf((*MockMongoCollection)(nil).Indexes))
}

// InsertMany mocks base method.
func (m *MockMongoCollection) InsertMany(ctx context.Context, documents []any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMany", ctx, documents)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMany indicates an expected call of InsertMany.
func (mr *MockMongoCollectionMockRecorder) InsertMany(ctx, documents any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMany", reflect.TypeOf((*MockMongoCollection)(nil).InsertMany), ctx, documents)
}

// InsertOne mocks base method.
func (m *MockMongoCollection) InsertOne(ctx context.Context, document any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", ctx, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockMongoCollectionMockRecorder) InsertOne(ctx, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockMongoCollection)(nil).InsertOne), ctx, document)
}

// ReplaceOne mocks base method.
func (m *MockMongoCollection) ReplaceOne(ctx context.Context, filter, replacement any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceOne", ctx, filter, replacement)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceOne indicates an expected call of ReplaceOne.
func (mr *MockMongoCollectionMockRecorder) ReplaceOne(ctx, filter, replacement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceOne", reflect.TypeOf((*MockMongoCollection)(nil).ReplaceOne), ctx, filter, replacement)
}

// UpdateMany mocks base method.
func (m *MockMongoCollection) UpdateMany(ctx context.Context, filter, update any) (*mongo.UpdateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMany", ctx, filter, update)
	ret0, _ := ret[0].(*mongo.UpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMany indicates an expected call of UpdateMany.
func (mr *MockMongoCollectionMockRecorder) UpdateMany(ctx, filter, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMany", reflect.TypeOf((*MockMongoCollection)(nil).UpdateMany), ctx, filter, update)
}

// UpdateOne mocks base method.
func (m *MockMongoCollection) UpdateOne(ctx context.Context, filter, update any, opts ...*options.UpdateOptions) (*mongo.UpdateResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter, update}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOne", varargs...)
	ret0, _ := ret[0].(*mongo.UpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockMongoCollectionMockRecorder) UpdateOne(ctx, filter, update any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter, update}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockMongoCollection)(nil).UpdateOne), varargs...)
}

// MockMongoClient is a mock of MongoClient interface.
type MockMongoClient struct {
	ctrl     *gomock.Controller
	recorder *MockMongoClientMockRecorder
	isgomock struct{}
}

// MockMongoClientMockRecorder is the mock recorder for MockMongoClient.
type MockMongoClientMockRecorder struct {
	mock *MockMongoClient
}

// NewMockMongoClient creates a new mock instance.
func NewMockMongoClient(ctrl *gomock.Controller) *MockMongoClient {
	mock := &MockMongoClient{ctrl: ctrl}
	mock.recorder = &MockMongoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoClient) EXPECT() *MockMongoClientMockRecorder {
	return m.recorder
}

// Aggregate mocks base method.
func (m *MockMongoClient) Aggregate(ctx context.Context, req *clients.AggregateRequest, results any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", ctx, req, results)
	ret0, _ := ret[0].(error)
	return ret0
}

// Aggregate indicates an expected call of Aggregate.
func (mr *MockMongoClientMockRecorder) Aggregate(ctx, req, results any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockMongoClient)(nil).Aggregate), ctx, req, results)
}

// Collection mocks base method.
func (m *MockMongoClient) Collection(database, collection string) clients.MongoCollection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", database, collection)
	ret0, _ := ret[0].(clients.MongoCollection)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockMongoClientMockRecorder) Collection(database, collection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockMongoClient)(nil).Collection), database, collection)
}

// Disconnect mocks base method.
func (m *MockMongoClient) Disconnect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockMongoClientMockRecorder) Disconnect(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockMongoClient)(nil).Disconnect), ctx)
}

// Exists mocks base method.
func (m *MockMongoClient) Exists(ctx context.Context, req *clients.ExistsRequest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, req)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockMongoClientMockRecorder) Exists(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockMongoClient)(nil).Exists), ctx, req)
}

// Find mocks base method.
func (m *MockMongoClient) Find(ctx context.Context, req *clients.FindRequest, results any, arg3 ...*options.FindOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req, results}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockMongoClientMockRecorder) Find(ctx, req, results any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req, results}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMongoClient)(nil).Find), varargs...)
}

// FindOne mocks base method.
func (m *MockMongoClient) FindOne(ctx context.Context, req *clients.FindOneRequest, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, req, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOne indicates an expected call of FindOne.
func (mr *MockMongoClientMockRecorder) FindOne(ctx, req, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockMongoClient)(nil).FindOne), ctx, req, result)
}

// InsertMany mocks base method.
func (m *MockMongoClient) InsertMany(ctx context.Context, req *clients.InsertManyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMany", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMany indicates an expected call of InsertMany.
func (mr *MockMongoClientMockRecorder) InsertMany(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMany", reflect.TypeOf((*MockMongoClient)(nil).InsertMany), ctx, req)
}

// InsertOne mocks base method.
func (m *MockMongoClient) InsertOne(ctx context.Context, req *clients.InsertOneRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockMongoClientMockRecorder) InsertOne(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockMongoClient)(nil).InsertOne), ctx, req)
}

// ReplaceOne mocks base method.
func (m *MockMongoClient) ReplaceOne(ctx context.Context, req *clients.ReplaceOneRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceOne", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceOne indicates an expected call of ReplaceOne.
func (mr *MockMongoClientMockRecorder) ReplaceOne(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceOne", reflect.TypeOf((*MockMongoClient)(nil).ReplaceOne), ctx, req)
}
