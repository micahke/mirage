// Code generated by MockGen. DO NOT EDIT.
// Source: clients/stats.go
//
// Generated by this command:
//
//	mockgen -source=clients/stats.go -destination=mocks/clients/mock_stats.go -package=mock_clients
//

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	reflect "reflect"

	clients "github.com/micahke/mirage/clients"
	gomock "go.uber.org/mock/gomock"
)

// MockStatsCounter is a mock of StatsCounter interface.
type MockStatsCounter struct {
	ctrl     *gomock.Controller
	recorder *MockStatsCounterMockRecorder
	isgomock struct{}
}

// MockStatsCounterMockRecorder is the mock recorder for MockStatsCounter.
type MockStatsCounterMockRecorder struct {
	mock *MockStatsCounter
}

// NewMockStatsCounter creates a new mock instance.
func NewMockStatsCounter(ctrl *gomock.Controller) *MockStatsCounter {
	mock := &MockStatsCounter{ctrl: ctrl}
	mock.recorder = &MockStatsCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsCounter) EXPECT() *MockStatsCounterMockRecorder {
	return m.recorder
}

// Inc mocks base method.
func (m *MockStatsCounter) Inc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Inc")
}

// Inc indicates an expected call of Inc.
func (mr *MockStatsCounterMockRecorder) Inc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inc", reflect.TypeOf((*MockStatsCounter)(nil).Inc))
}

// MockStatsClient is a mock of StatsClient interface.
type MockStatsClient struct {
	ctrl     *gomock.Controller
	recorder *MockStatsClientMockRecorder
	isgomock struct{}
}

// MockStatsClientMockRecorder is the mock recorder for MockStatsClient.
type MockStatsClientMockRecorder struct {
	mock *MockStatsClient
}

// NewMockStatsClient creates a new mock instance.
func NewMockStatsClient(ctrl *gomock.Controller) *MockStatsClient {
	mock := &MockStatsClient{ctrl: ctrl}
	mock.recorder = &MockStatsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsClient) EXPECT() *MockStatsClientMockRecorder {
	return m.recorder
}

// Counter mocks base method.
func (m *MockStatsClient) Counter(name string) clients.StatsCounter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Counter", name)
	ret0, _ := ret[0].(clients.StatsCounter)
	return ret0
}

// Counter indicates an expected call of Counter.
func (mr *MockStatsClientMockRecorder) Counter(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Counter", reflect.TypeOf((*MockStatsClient)(nil).Counter), name)
}

// Scope mocks base method.
func (m *MockStatsClient) Scope(scopes ...string) clients.StatsClient {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range scopes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scope", varargs...)
	ret0, _ := ret[0].(clients.StatsClient)
	return ret0
}

// Scope indicates an expected call of Scope.
func (mr *MockStatsClientMockRecorder) Scope(scopes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scope", reflect.TypeOf((*MockStatsClient)(nil).Scope), scopes...)
}
